{"version":3,"sources":["components/DeckstringDisplay.js","App.js","serviceWorker.js","index.js"],"names":["$","require","columns","Header","accessor","cardList","search","dbfId","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","undefined","_step2","_iterator2","Symbol","iterator","next","done","i","value","name","err","return","getJSON","data","DeckstringDisplay","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","deckstring","event","target","setState","which","s","decklist","array","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","key","push","format","decode","console","log","e","react_default","a","createElement","Input","type","onChange","changeValue","bind","onKeyPress","handleKeyPress","es","React","Component","App","className","DeckstringDisplay_DeckstringDisplay","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oOAQMA,SAAIC,EAAQ,KAEZC,EAAU,CAAC,CACfC,OAAQ,WACRC,SAAU,YAEZ,CACED,OAAQ,SACRC,SAAU,SAGRC,EAAW,GAsBf,SAASC,EAAOC,GAChB,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IACE,QAAAC,EAAAC,EAAgBR,EAAhBS,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EACA,KADWU,EACXN,EAAAO,MACE,GAAID,EAAEX,OAASA,EAAQ,OAAOW,EAAEE,MAHpC,MAAAC,GAAAZ,GAAA,EAAAC,EAAAW,EAAA,YAAAb,GAAA,MAAAK,EAAAS,QAAAT,EAAAS,SAAA,WAAAb,EAAA,MAAAC,IAtBAV,EAAEuB,QAAQ,mFAAoF,SAASC,GACrGnB,EAAWmB,QA4BQC,cACnB,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXf,MAAOO,EAAMP,OAAS,GACtBgB,WAAY,IALER,2EASNS,GACV,IAAIjB,EAAQiB,EAAMC,OAAOlB,MACzBW,KAAKQ,SAAS,CAACnB,MAAOA,2CAGTiB,GACb,GAAmB,IAAfA,EAAMG,MAAa,CACrB,IAAIC,EAAIJ,EAAMC,OAAOlB,MACrB,IACEqB,EAzCR,SAAgBC,GAEd,IAAIC,EAAQ,GADdC,GAAA,EAAAC,GAAA,EAAAC,OAAAlC,EAAA,IAEE,QAAAmC,EAAAC,EAAgBN,EAAQ,MAAxB3B,OAAAC,cAAA4B,GAAAG,EAAAC,EAAA/B,QAAAC,MAAA0B,GAAA,EACA,KADWzB,EACX4B,EAAA3B,MACM6B,EAAM,GACVA,EAAG,SAAe1C,EAAOY,EAAE,IAC3B8B,EAAG,KAAW9B,EAAE,GAChBwB,EAAMO,KAAKD,IAPf,MAAA3B,GAAAuB,GAAA,EAAAC,EAAAxB,EAAA,YAAAsB,GAAA,MAAAI,EAAAzB,QAAAyB,EAAAzB,SAAA,WAAAsB,EAAA,MAAAC,GASE,OAAOH,EA+BGQ,CAAOC,YAAOf,EAAMC,OAAOlB,QAC/BW,KAAKQ,SAAS,CACZH,WAAYK,IAEdY,QAAQC,IAAIvB,KAAKI,MAAMC,YACvB,MAAOmB,GACPF,QAAQC,IAAIC,sCAShB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,KAAK,OAAOC,SAAU9B,KAAK+B,YAAYC,KAAKhC,MAAOiC,WAAYjC,KAAKkC,eAAeF,KAAKhC,MAAOX,MAAOW,KAAKI,MAAMf,QACxHoC,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAYzC,KAAMM,KAAKI,MAAMC,WAAYjC,QAASA,YArCXgE,IAAMC,WClCtCC,mLATX,OACEb,EAAAC,EAAAC,cAAA,OAAKY,UAAU,OACbd,EAAAC,EAAAC,cAACa,EAAD,cAJUH,aCQEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.32523ee4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { decode } from 'deckstrings';\r\nimport { Input } from 'reactstrap';\r\n\r\nimport ReactTable from \"react-table\";\r\nimport 'react-table/react-table.css'\r\n\r\nconst $ = require('jquery');\r\n\r\nconst columns = [{\r\n  Header: 'Cardname',\r\n  accessor: 'cardname'\r\n},\r\n{\r\n  Header: 'Amount',\r\n  accessor: 'amnt'\r\n}]\r\n\r\nvar cardList = \"\";\r\n$.getJSON('https://api.hearthstonejson.com/v1/28329/enUS/cards.collectible.json?callback=?\"', function(data) {\r\n  cardList = data;\r\n})\r\n\r\n//Sample Deckstring: AAECAZICCLQDxQTeBcLOApnTApvoAuT7AvX8AgtAX+kB0wPkCKDNAofOApjSAp7SAtvTAr/yAgA=\r\n\r\n\r\nfunction format(decklist)\r\n{\r\n  let array = [];\r\n  for (const i of decklist['cards'])\r\n  {\r\n    let key = {};\r\n    key['cardname'] = search(i[0]);\r\n    key['amnt'] = i[1];\r\n    array.push(key)\r\n  }\r\n  return array;\r\n\r\n}\r\n\r\nfunction search(dbfId)\r\n{\r\n  for (const i of cardList)\r\n  {\r\n    if (i.dbfId == dbfId) {return i.name;}\r\n  }\r\n}\r\n\r\nexport default class DeckstringDisplay extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      value: props.value || \"\",\r\n      deckstring: []\r\n    }\r\n  }\r\n\r\n  changeValue(event) {\r\n    let value = event.target.value\r\n    this.setState({value: value});\r\n  }\r\n\r\n  handleKeyPress(event) {\r\n    if (event.which == 13) {\r\n      let s = event.target.value\r\n      try {\r\n        s = format(decode(event.target.value));\r\n        this.setState({\r\n          deckstring: s,\r\n        });\r\n        console.log(this.state.deckstring)\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n\r\n\r\n\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n        <Input type=\"text\" onChange={this.changeValue.bind(this)} onKeyPress={this.handleKeyPress.bind(this)} value={this.state.value}/>\r\n        <ReactTable data={this.state.deckstring} columns={columns}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\n\nimport DeckstringDisplay from './components/DeckstringDisplay';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <DeckstringDisplay>\n        </DeckstringDisplay>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}